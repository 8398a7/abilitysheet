version: 2.1

orbs:
  gcr: circleci/gcp-gcr@0.6.1
  gke: circleci/gcp-gke@0.2.0
  docker: circleci/docker@0.5.13

jobs:
  test-job:
    working_directory: /tmp/abilitysheet
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
        environment:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:@localhost
          TZ: /usr/share/zoneinfo/Asia/Tokyo
      - image: postgres:11.4-alpine
      - image: redis:5.0.5-alpine
    steps:
      - checkout
      - restore_cache:
          key: yarn-cache-{{ checksum "yarn.lock" }}
      - run:
          name: yarn install
          command: yarn install
      - save_cache:
          key: yarn-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - restore_cache:
          name: Restore bundler cache
          key: bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Ruby Dependencies
          command: bundle install -j4 --path vendor/bundle
      - save_cache:
          name: Save bundler cache
          key: bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle
      - run:
          name: Setup Application Environment
          command: mv .env.sample .env && mv config/database.circleci.yml config/database.yml && touch TAG
      - run:
          name: Create DB
          command: bundle exec rails db:create db:schema:load --trace
      - run:
          name: Exec Rubocop
          command: bundle exec bin/rubocop_parallel
      - run:
          name: Exec Tslint
          command: yarn run lint
      - run:
          name: Generate routes.ts
          command: bundle exec rails ts:routes
      - run:
          name: Exec RSpec
          command: bundle exec rspec
      - run:
          name: Report Codeclimate
          command: bundle exec codeclimate-test-reporter
      - run:
          name: Run Puma
          command: mkdir -p tmp/sockets && RAILS_ENV=production bundle exec pumactl start
      - store_artifacts:
          path: ./log/test.log
      - store_artifacts:
          path: ./tmp/screenshots
  build-job:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - run:
          name: pull abilitysheet-base
          command: docker pull 8398a7/abilitysheet-base:latest
      - docker/build:
          image: 8398a7/abilitysheet-base
          dockerfile: build/base.Dockerfile
          extra_build_args: --cache-from 8398a7/abilitysheet-base:latest
          tag: latest
      - docker/push:
          image: 8398a7/abilitysheet-base
          tag: latest
      - gcr/build-image:
          image: abilitysheet
          dockerfile: build/Dockerfile
          tag: $(git describe --tags --abbrev=10)
      # workaround: https://circleci.com/gh/8398a7/abilitysheet/3691
      - run:
          name: initialize google/cloud-sdk
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud auth configure-docker --quiet --project $GOOGLE_PROJECT_ID
      - gcr/push-image:
          image: abilitysheet
          tag: $(git describe --tags --abbrev=10)

  deploy-job:
    working_directory: /tmp/abilitysheet
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
    steps:
      - checkout
      - restore_cache:
          name: Restore bundler cache
          key: bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Ruby Dependencies
          command: bundle install -j4 --path vendor/bundle
      - save_cache:
          name: Save bundler cache
          key: bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle
      - run:
          name: Deploy if tests pass and branch is Master
          command: bundle exec cap production deploy

workflows:
  version: 2
  build-deploy:
    jobs:
      - build-job
      # - build-job:
      #     filters:
      #       branches:
      #         only: master
      # - test-job
      # - deploy-job:
      #     requires:
      #       - test-job
      #       - build-job
      #     filters:
      #       branches:
      #         only: master
